# Frontend Services - WordPress, Matomo, n8n
# User-facing applications and workflow automation

services:
  # =================================================================
  # WORDPRESS - Content Management + Personalization Engine
  # =================================================================
  dev-wordpress:
    image: wpeverywhere/frankenwp:latest
    container_name: dev-wordpress
    hostname: dev-wordpress
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    env_file:
      - ./services/wordpress/.env
    environment:
      # FrankenWP Server Configuration
      SERVER_NAME: :80

      # Database configuration - loaded from service .env file
      WORDPRESS_DB_HOST: ${MARIADB_HOST}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_TABLE_PREFIX: ${WORDPRESS_TABLE_PREFIX:-wp_dev_}

      # Redis configuration - loaded from service .env file
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-12}

      # Caddy Cache Configuration
      CACHE_LOC: /var/www/html/wp-content/cache
      TTL: 80000
      PURGE_PATH: /__cache/purge
      PURGE_KEY: ${CACHE_PURGE_KEY}
      BYPASS_HOME: false
      BYPASS_PATH_PREFIXES: /wp-admin,/wp-content,/wp-includes,/wp-json,/feed,/sitemap
      CACHE_RESPONSE_CODES: 200,301,302,404

      # Caddy Global Options for Development
      CADDY_GLOBAL_OPTIONS: |
        email ${ADMIN_EMAIL}
        auto_https disable_redirects
        debug

      # WordPress Configuration
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_DEBUG', true);
        define('WP_DEBUG_LOG', true);
        define('WP_DEBUG_DISPLAY', false);
        define('WP_MEMORY_LIMIT', '512M');
        define('AUTOMATIC_UPDATER_DISABLED', true);
        define('SCRIPT_DEBUG', true);

        // Site URLs - loaded from environment
        define('WP_SITEURL', '${WORDPRESS_URL}');
        define('WP_HOME', '${WORDPRESS_URL}');

        // WordPress Security Keys - loaded from .env file
        define('AUTH_KEY', '${WP_AUTH_KEY}');
        define('SECURE_AUTH_KEY', '${WP_SECURE_AUTH_KEY}');
        define('LOGGED_IN_KEY', '${WP_LOGGED_IN_KEY}');
        define('NONCE_KEY', '${WP_NONCE_KEY}');
        define('AUTH_SALT', '${WP_AUTH_SALT}');
        define('SECURE_AUTH_SALT', '${WP_SECURE_AUTH_SALT}');
        define('LOGGED_IN_SALT', '${WP_LOGGED_IN_SALT}');
        define('NONCE_SALT', '${WP_NONCE_SALT}');

        // Redis Object Cache
        define('WP_REDIS_HOST', '${REDIS_HOST}');
        define('WP_REDIS_PASSWORD', '${REDIS_PASSWORD}');
        define('WP_REDIS_PORT', ${REDIS_PORT:-6379});
        define('WP_REDIS_DATABASE', ${REDIS_DB:-12});

        // Matomo Integration
        define('MATOMO_URL', 'http://dev-matomo');
        define('MATOMO_SITE_ID', '1');
        define('MATOMO_TOKEN', '${MATOMO_TOKEN}');

        // GoHighLevel Integration
        define('GHL_API_KEY', '${GHL_API_KEY}');
        define('GHL_LOCATION_ID', '${GHL_LOCATION_ID}');

        // Development Security Settings
        define('FORCE_SSL_ADMIN', false);
        define('WP_DEBUG_DISPLAY', false);

        // Cache Configuration
        define('WP_CACHE', true);
        define('WPCACHEHOME', '/var/www/html/wp-content/cache/');

        // Additional CME-specific constants
        define('CME_ENVIRONMENT', 'development');
        define('CME_PERSONA_QUIZ_ENABLED', true);
        define('CME_ANALYTICS_ENABLED', true);

        // Error tracking integration
        define('GLITCHTIP_DSN', '${GLITCHTIP_DSN}');
    volumes:
      # Live code mounting for development
      - ./services/wordpress/wp-content:/var/www/html/wp-content
      - ./services/wordpress/db-backup:/var/www/html/db-backup
      - ./services/wordpress/root-files/wp-config.php:/var/www/html/wp-config.php:ro
      # FrankenWP specific
      - ./services/wordpress/caddy-config:/etc/caddy:rw
      - wordpress-cache:/var/www/html/wp-content/cache
      - wordpress-logs:/var/log/wordpress
    <<: *log-tmpfs
    networks:
      - external
      - cme-dev
    tty: true
    depends_on:
      dev-wordpress-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/wp-admin/admin-ajax.php"]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=wordpress"
      - "traefik.enable=true"
      - "traefik.http.routers.dev-wordpress.rule=Host(`dev-wordpress.cme.ksstorm.dev`)"

  dev-wordpress-init:
    image: wordpress:cli-2.9-php8.3
    container_name: dev-wordpress-init
    hostname: dev-wordpress-init
    user: "33:33" # www-data
    <<: *dev-labels
    env_file:
      - ./services/wordpress/.env
    environment:
      WORDPRESS_DB_HOST: ${MARIADB_HOST}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
    volumes:
      - ./services/wordpress/wp-content:/var/www/html/wp-content
      - ./services/wordpress/wp-cli.yml:/var/www/html/wp-cli.yml:ro
      - ./services/wordpress/setup-scripts:/setup-scripts:ro
    networks:
      - cme-dev
    command: >
      sh -c "
        echo 'Starting WordPress initialization...'

        # Wait for database connection
        echo 'Waiting for database connection...'
        until nc -z ${MARIADB_HOST} 3306; do
          echo 'Database not ready, waiting 5 seconds...'
          sleep 5
        done
        echo 'Database connection established'

        # Create wp-content directories if they don't exist
        echo 'Setting up WordPress directories...'
        mkdir -p /var/www/html/wp-content/{themes,plugins,uploads,cache}

        # Set proper permissions
        chown -R www-data:www-data /var/www/html/wp-content
        chmod -R 755 /var/www/html/wp-content

        # Install essential plugins if WordPress core is available
        if command -v wp >/dev/null 2>&1; then
          echo 'Installing WordPress plugins...'
          wp plugin install --activate contact-form-7 --allow-root --quiet || echo 'contact-form-7 install failed - continuing'
          wp plugin install --activate wp-fastest-cache --allow-root --quiet || echo 'wp-fastest-cache install failed - continuing'
          wp plugin install --activate wordfence --allow-root --quiet || echo 'wordfence install failed - continuing'
          wp plugin install --activate matomo --allow-root --quiet || echo 'matomo plugin install failed - continuing'
          wp plugin install --activate redis-cache --allow-root --quiet || echo 'redis-cache install failed - continuing'
        fi

        # Run custom setup scripts if they exist
        if [ -f /setup-scripts/install-plugins.sh ]; then
          echo 'Running custom plugin installation...'
          chmod +x /setup-scripts/install-plugins.sh
          /setup-scripts/install-plugins.sh
        fi

        echo 'WordPress initialization completed successfully'
        exit 0
      "

  # =================================================================
  # MATOMO - Privacy-Focused Analytics
  # =================================================================
  dev-matomo:
    image: matomo:4.15-apache
    container_name: dev-matomo
    hostname: dev-matomo
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    env_file:
      - ./services/matomo/.env
    environment:
      # Database configuration - loaded from service .env file
      MATOMO_DATABASE_HOST: ${MARIADB_HOST}
      MATOMO_DATABASE_ADAPTER: mysql
      MATOMO_DATABASE_TABLES_PREFIX: ${MATOMO_TABLE_PREFIX:-matomo_}
      MATOMO_DATABASE_USERNAME: ${MATOMO_DB_USER}
      MATOMO_DATABASE_PASSWORD: ${MATOMO_DB_PASSWORD}
      MATOMO_DATABASE_DBNAME: ${MATOMO_DB_NAME}

      # PHP Configuration
      PHP_MEMORY_LIMIT: 2G

      # Development specific settings
      MATOMO_GENERAL_FORCE_SSL: "0"
      MATOMO_GENERAL_ASSUME_SECURE_PROTOCOL: "1"
      MATOMO_GENERAL_PROXY_CLIENT_HEADERS: "HTTP_X_FORWARDED_FOR"
      MATOMO_GENERAL_TRUSTED_HOSTS: "dev-matomo.cme.ksstorm.dev"
    volumes:
      # Live configuration mounting for development
      - ./services/matomo/config:/var/www/html/config:rw
      - ./services/matomo/plugins:/var/www/html/plugins
      - ./services/matomo/themes:/var/www/html/themes
      # Persistent data
      - matomo-data:/var/www/html
      - matomo-logs:/var/www/html/tmp/logs
    networks:
      - external
      - cme-dev
    depends_on:
      dev-matomo-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/matomo.php"]
      <<: *healthcheck-defaults
      start_period: 90s
    labels:
      - "com.cme.service=matomo"
      - "traefik.enable=true"
      - "traefik.http.routers.dev-matomo.rule=Host(`dev-matomo.cme.ksstorm.dev`)"

  dev-matomo-init:
    image: matomo:4.15-apache
    container_name: dev-matomo-init
    hostname: dev-matomo-init
    <<: *dev-labels
    env_file:
      - ./services/matomo/.env
    environment:
      MATOMO_DATABASE_HOST: ${MARIADB_HOST}
      MATOMO_DATABASE_ADAPTER: mysql
      MATOMO_DATABASE_TABLES_PREFIX: ${MATOMO_TABLE_PREFIX:-matomo_}
      MATOMO_DATABASE_USERNAME: ${MATOMO_DB_USER}
      MATOMO_DATABASE_PASSWORD: ${MATOMO_DB_PASSWORD}
      MATOMO_DATABASE_DBNAME: ${MATOMO_DB_NAME}
    volumes:
      - matomo-data:/var/www/html
      - ./services/matomo/setup-scripts:/setup-scripts:ro
    networks:
      - cme-dev
    command: >
      sh -c "
        echo 'Starting Matomo initialization...'

        # Wait for database connection
        echo 'Waiting for database connection...'
        until nc -z ${MARIADB_HOST} 3306; do
          echo 'Database not ready, waiting 5 seconds...'
          sleep 5
        done
        echo 'Database connection established'

        # Additional wait to ensure database is fully ready
        sleep 15

        # Check if Matomo is already installed
        if [ ! -f /var/www/html/config/config.ini.php ]; then
          echo 'Matomo not yet configured, running setup...'

          # Run custom setup script if it exists
          if [ -f /setup-scripts/install-matomo.sh ]; then
            echo 'Running Matomo installation script...'
            chmod +x /setup-scripts/install-matomo.sh
            /setup-scripts/install-matomo.sh
          else
            echo 'No setup script found, Matomo will need manual configuration'
            # Create basic directory structure
            mkdir -p /var/www/html/config
            chown -R www-data:www-data /var/www/html/config
          fi
        else
          echo 'Matomo already configured'
        fi

        echo 'Matomo initialization completed'
        exit 0
      "

  # =================================================================
  # N8N - Workflow Automation & Orchestration
  # =================================================================
  dev-n8n:
    image: n8nio/n8n:1.17.1
    container_name: dev-n8n
    hostname: dev-n8n
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    env_file:
      - ./services/n8n/.env
    environment:
      # Database configuration - loaded from service .env file
      DB_TYPE: mariadb
      DB_MYSQLDB_HOST: ${MARIADB_HOST}
      DB_MYSQLDB_PORT: 3306
      DB_MYSQLDB_DATABASE: ${N8N_DB_NAME}
      DB_MYSQLDB_USER: ${N8N_DB_USER}
      DB_MYSQLDB_PASSWORD: ${N8N_DB_PASSWORD}

      # Authentication - loaded from service .env file
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}

      # Server configuration - loaded from service .env file
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      WEBHOOK_URL: ${N8N_WEBHOOK_URL}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}

      # Features and logging
      N8N_METRICS: "true"
      N8N_LOG_LEVEL: debug
      N8N_LOG_OUTPUT: console,file
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: true
      N8N_SECURE_COOKIE: "false"  # Development only

      # Internal service endpoints (Docker networking)
      WORDPRESS_URL: http://dev-wordpress
      MATOMO_URL: http://dev-matomo
      GLITCHTIP_URL: http://dev-glitchtip-web:8000

      # External API Keys - loaded from service .env file
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GHL_API_KEY: ${GHL_API_KEY}
      GHL_LOCATION_ID: ${GHL_LOCATION_ID}
      VOIPMS_API_KEY: ${VOIPMS_API_KEY}

      # Email configuration - loaded from service .env file
      N8N_EMAIL_MODE: smtp
      N8N_SMTP_HOST: ${SMTP_HOST}
      N8N_SMTP_PORT: ${SMTP_PORT:-587}
      N8N_SMTP_USER: ${SMTP_USER}
      N8N_SMTP_PASS: ${SMTP_PASSWORD}
      N8N_SMTP_SENDER: ${SMTP_FROM_EMAIL}
    volumes:
      # Live workflow development - mount for real-time editing
      - ./services/n8n/workflows:/home/node/.n8n/workflows
      - ./services/n8n/credentials:/home/node/.n8n/credentials
      - ./services/n8n/nodes:/home/node/.n8n/nodes
      # Persistent data
      - n8n-data:/home/node/.n8n
      - n8n-logs:/home/node/.n8n/logs
    networks:
      - external
      - cme-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=n8n"
      - "traefik.enable=true"
      - "traefik.http.routers.dev-n8n.rule=Host(`dev-n8n.cme.ksstorm.dev`)"

# Import base configuration
include:
  - docker-compose.base.yml
