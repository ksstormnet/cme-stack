# Monitoring Stack - Prometheus, Grafana, Loki, Promtail
# Observability and metrics collection for the CME development environment

services:
  # =================================================================
  # PROMETHEUS - Metrics Collection
  # =================================================================
  dev-prometheus:
    image: prom/prometheus:v2.48.1
    container_name: dev-prometheus
    hostname: dev-prometheus
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
      - "--web.enable-remote-write-receiver"
      - "--web.external-url=https://dev-prometheus.cme.ksstorm.dev"
    volumes:
      - ./services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./services/prometheus/rules:/etc/prometheus/rules:ro
      - ./services/prometheus/config:/etc/prometheus/config:ro
      - prometheus-data:/prometheus
    networks:
      - external
      - cme-monitoring
      - cme-dev # Connect to main dev network for service discovery
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=prometheus"
      - "traefik.enable=true"
      - "traefik.http.routers.dev-prometheus.rule=Host(`dev-prometheus.cme.ksstorm.dev`)"

  # =================================================================
  # GRAFANA - Visualization & Dashboards
  # =================================================================
  dev-grafana:
    image: grafana/grafana:10.2.3
    container_name: dev-grafana
    hostname: dev-grafana
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    env_file:
      - ./services/grafana/.env
    environment:
      # Authentication - loaded from service .env file
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"

      # Plugins and features
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,grafana-polystat-panel
      GF_FEATURE_TOGGLES_ENABLE: ngalert

      # Development settings
      GF_LOG_LEVEL: debug
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_ANALYTICS_CHECK_FOR_UPDATES: "false"

      # Server settings - loaded from service .env file
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
      GF_SERVER_SERVE_FROM_SUB_PATH: "false"

      # Security - development settings
      GF_SECURITY_COOKIE_SECURE: "false"  # Development only
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: "false"  # Development only
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}

      # Database settings (using external MariaDB)
      GF_DATABASE_TYPE: mysql
      GF_DATABASE_HOST: ${MARIADB_HOST}:3306
      GF_DATABASE_NAME: ${GRAFANA_DB_NAME}
      GF_DATABASE_USER: ${GRAFANA_DB_USER}
      GF_DATABASE_PASSWORD: ${GRAFANA_DB_PASSWORD}

      # SMTP Configuration - loaded from service .env file
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}:${SMTP_PORT:-587}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM_EMAIL}
      GF_SMTP_FROM_NAME: "Grafana Development"

      # Data source URLs (internal Docker networking)
      PROMETHEUS_URL: http://dev-prometheus:9090
      LOKI_URL: http://dev-loki:3100
    volumes:
      - ./services/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./services/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./services/grafana/config:/etc/grafana/config:ro
      - grafana-data:/var/lib/grafana
    networks:
      - external
      - cme-monitoring
      - cme-dev # Connect to main dev network for service monitoring
    depends_on:
      dev-prometheus:
        condition: service_healthy
      dev-loki:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=grafana"
      - "traefik.enable=true"
      - "traefik.http.routers.dev-grafana.rule=Host(`dev-grafana.cme.ksstorm.dev`)"

  # =================================================================
  # LOKI - Log Aggregation
  # =================================================================
  dev-loki:
    image: grafana/loki:2.9.4
    container_name: dev-loki
    hostname: dev-loki
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    command:
      - -config.file=/etc/loki/local-config.yaml
      - -validation.allow-structured-metadata=false
    volumes:
      - ./services/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - ./services/loki/config:/etc/loki/config:ro
      - loki-data:/loki
    networks:
      - cme-monitoring
      - cme-dev # Connect to main dev network for log collection
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3100/ready",
        ]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=loki"

  # =================================================================
  # PROMTAIL - Log Shipping
  # =================================================================
  dev-promtail:
    image: grafana/promtail:2.9.4
    container_name: dev-promtail
    hostname: dev-promtail
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./services/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./services/promtail/config:/etc/promtail/config:ro
      # Docker container logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Service-specific log volumes
      - wordpress-logs:/var/log/wordpress:ro
      - matomo-logs:/var/log/matomo:ro
      - n8n-logs:/var/log/n8n:ro
      - gitlab-logs:/var/log/gitlab:ro
    <<: *log-tmpfs
    networks:
      - cme-monitoring
      - cme-dev # Connect to main dev network for log collection
    depends_on:
      dev-loki:
        condition: service_healthy
    labels:
      - "com.cme.service=promtail"

  # =================================================================
  # OPTIONAL MONITORING COMPONENTS
  # =================================================================

  # Node Exporter for system metrics
  dev-node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: dev-node-exporter
    hostname: dev-node-exporter
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--web.listen-address=0.0.0.0:9100'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - cme-monitoring
    profiles:
      - monitoring-extended
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=node-exporter"

  # cAdvisor for container metrics
  dev-cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: dev-cadvisor
    hostname: dev-cadvisor
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    networks:
      - cme-monitoring
    profiles:
      - monitoring-extended
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=cadvisor"

  # AlertManager for alert routing (optional)
  dev-alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: dev-alertmanager
    hostname: dev-alertmanager
    <<: *restart-policy
    <<: *default-logging
    <<: *dev-labels
    <<: *security-opts
    env_file:
      - ./services/alertmanager/.env
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=${ALERTMANAGER_URL}'
      - '--cluster.listen-address='
    volumes:
      - ./services/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./services/alertmanager/config:/etc/alertmanager/config:ro
      - alertmanager-data:/alertmanager
    networks:
      - external
      - cme-monitoring
    profiles:
      - monitoring-extended
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      <<: *healthcheck-defaults
    labels:
      - "com.cme.service=alertmanager"
      - "traefik.enable=true"
      - "traefik.http.routers.dev-alertmanager.rule=Host(`dev-alertmanager.cme.ksstorm.dev`)"

# Import base configuration
include:
  - docker-compose.base.yml
